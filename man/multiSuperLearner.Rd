% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/treatment_estimate.R
\name{multiSuperLearner}
\alias{multiSuperLearner}
\title{SuperLearning for Multinomial Outcomes}
\usage{
multiSuperLearner(
  Y,
  X,
  SL.library,
  verbose = FALSE,
  control = list(),
  cvControl = list(),
  ...
)
}
\arguments{
\item{Y}{The multinomial outcome. Must be a numeric vector.}

\item{X}{The predictor variables, usually a data.frame.}

\item{SL.library}{A character vector of prediction algorithms.
See details below for examples on the structure.}

\item{verbose}{Print messages}

\item{control}{A list of parameters to control the estimation process.
Parameters include saveFitLibrary and trimLogit.
See SuperLearner::SuperLearner.control for details.}

\item{cvControl}{A list of parameters to control the cross-validation process.
Parameters include V, stratifyCV, shuffle and validRows.
See SuperLearner::SuperLearner.CV.control for details.}
}
\value{
An object of class \code{multiSuperLearner}. \describe{
\item{SuperLearnerFits}{The conditional binomial SuperLearner fits}
\item{coef}{The super learner ensemble weights}
\item{SL.predict}{A matrix with columns corresponding to super learner predictions
of each of the outcomes based on \code{X}.}
\item{library.predict}{A list with each entry corresponding to the candidate
learner fits in each of the conditional binomial regressions.}
\item{cvRisk}{The cross-validated negative log-multinomial likelihood loss for
each candidate learner.}
}
}
\description{
This function is a bare-bones implementation of super learning for a
multinomial outcome. It generates compatible ensemble estimates of each class
of an outcome by fitting a sequence of conditional binomial regressions.
For example, if there are three class of outcome, two prediction functions are fit:
the first regresses an indicator of the class with most observations onto
the predictors, the second regresses an indicator of the class with second most
observations onto the predictors in the subset of data not in class one. The second
class probabilities are generated as the probability of being in the second class given
not in the first times the probability of not being in the first. The third class
probabilities are generated as one minus the sum of the other two probabilities.
}
\details{
Each candidate learner specified in \code{SL.library} is fit this way with a separate
call to \code{SuperLearner} with \code{family = binomial()}. The ensemble is generated
as the convex combination of learners that maximizes cross-validated log-likelihood for
the multinomial outcome.
}
\examples{
# simulate data
set.seed(1234)
X <- data.frame(x1 = rnorm(100), x2 = rnorm(100))
Y <- rbinom(100, 1, 0.2) + rbinom(100, 1, plogis(X$x1)) +
         rbinom(100, 1, plogis(X$x2^2))

# fit super learner
fit <- multiSuperLearner(Y = Y, X = X, SL.library = c("SL.glm","SL.mean"))

}
